#!/usr/bin/env node

'use strict';

/* eslint-disable import/no-dynamic-require */
const winston = require('winston');
const config = require('config');
const server = require('../');
const hoek = require('hoek');
const { Bookend } = require('screwdriver-build-bookend');

// Setup Authentication
const authConfig = config.get('auth');

// Setup HTTPd
const httpdConfig = config.get('httpd');

// Setup Webhooks
const webhooksConfig = config.get('webhooks');

// Special urls for things like the UI
const ecosystem = config.get('ecosystem');

ecosystem.api = httpdConfig.uri;

// Notification config
const notificationConfig = config.get('notifications');

// Setup Datastore
const datastoreConfig = config.get('datastore');
const DatastorePlugin = require(`screwdriver-datastore-${datastoreConfig.plugin}`);
const datastore = new DatastorePlugin(hoek.applyToDefaults({ ecosystem },
    (datastoreConfig[datastoreConfig.plugin] || {})));

// Source Code Plugin
const scmConfig = { scms: config.get('scms') };
const ScmPlugin = require('screwdriver-scm-router');
const scm = new ScmPlugin(scmConfig || {});

authConfig.scm = scm;

// Plugin to upload artifacts to store
const ArtifactPlugin = require('screwdriver-artifact-bookend');
const artifact = new ArtifactPlugin(ecosystem.store);

// Build cache plugin
const CachePlugin = require('screwdriver-cache-bookend');
const cache = new CachePlugin(ecosystem.api);

// Plugin to upload coverage
const coverageConfig = config.get('coverage');
const CoveragePlugin = require('screwdriver-coverage-bookend');
const coverage = new CoveragePlugin(coverageConfig);

// Plugins to run before/after a build
const bookends = config.get('bookends');
const bookend = new Bookend({
    scm,
    'screwdriver-artifact-bookend': artifact,
    'screwdriver-coverage-bookend': coverage,
    'screwdriver-cache-bookend': cache
},
bookends.setup || [], // plugins required for the setup- steps
bookends.teardown || [] // plugins required for the teardown- steps
);

// Setup Pipeline Factory for Executor
const Models = require('screwdriver-models');
const pipelineFactory = Models.PipelineFactory.getInstance({
    datastore,
    scm
});

// Setup Executor
const executorConfig = config.get('executor');
executorConfig[executorConfig.plugin].options.pipelineFactory = pipelineFactory;
const ExecutorPlugin = require(`screwdriver-executor-${executorConfig.plugin}`);
const executor = new ExecutorPlugin(Object.assign(
    { ecosystem: hoek.clone(ecosystem) },
    executorConfig[executorConfig.plugin].options
));

// Setup Model Factories
const commandFactory = Models.CommandFactory.getInstance({
    datastore
});
const commandTagFactory = Models.CommandTagFactory.getInstance({
    datastore
});
const templateFactory = Models.TemplateFactory.getInstance({
    datastore
});
const templateTagFactory = Models.TemplateTagFactory.getInstance({
    datastore
});
const jobFactory = Models.JobFactory.getInstance({
    datastore,
    executor
});
const userFactory = Models.UserFactory.getInstance({
    datastore,
    scm,
    password: authConfig.encryptionPassword
});
const buildFactory = Models.BuildFactory.getInstance({
    datastore,
    dockerRegistry: ecosystem.dockerRegistry,
    scm,
    executor,
    bookend,
    uiUri: ecosystem.ui
});
const stepFactory = Models.StepFactory.getInstance({
    datastore
});
const secretFactory = Models.SecretFactory.getInstance({
    datastore,
    password: authConfig.encryptionPassword
});
const tokenFactory = Models.TokenFactory.getInstance({
    datastore,
    password: authConfig.hashingPassword
});
const eventFactory = Models.EventFactory.getInstance({
    datastore,
    scm
});
const bannerFactory = Models.BannerFactory.getInstance({
    datastore,
    scm
});
const collectionFactory = Models.CollectionFactory.getInstance({
    datastore
});
const triggerFactory = Models.TriggerFactory.getInstance({
    datastore
});

// @TODO run setup for SCM and Executor
datastore.setup()
    .then(() => server({
        httpd: httpdConfig,
        auth: authConfig,
        webhooks: webhooksConfig,
        notifications: notificationConfig,
        coverage,
        ecosystem,
        commandFactory,
        commandTagFactory,
        templateFactory,
        templateTagFactory,
        pipelineFactory,
        jobFactory,
        userFactory,
        buildFactory,
        stepFactory,
        bannerFactory,
        secretFactory,
        tokenFactory,
        eventFactory,
        collectionFactory,
        triggerFactory,
        banners: authConfig,
        builds: {
            ecosystem,
            authConfig
        },
        stats: {
            executor, scm
        }
    }))
    .then(instance => winston.info('Server running at %s', instance.info.uri))
    .catch((err) => {
        winston.error(err);
        process.exit(1);
    });
